version: "4"

services:
  nats-server:
    image: nats:2.11.4
    ports:
      - 8222:8222
      - 4222:4222

  ms-gateway:
    build: ./ms-gateway
    ports:
      - ${GATEWAY_PORT:-3000}:3000
    volumes:
      - ./ms-gateway/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${GATEWAY_PORT:-3000}
      - NATS_SERVERS=${NATS_SERVERS:-nats://nats-server:4222}

  ms-documents:
    build: ./ms-documents
    volumes:
      - ./ms-documents/src:/usr/src/app/src
      - ./ms-documents/generated:/usr/src/app/generated
    command: npm run start:dev
    environment:
      - PORT=${DOCUMENTS_PORT:-3001}
      - NATS_SERVERS=${NATS_SERVERS:-nats://nats-server:4222}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:123456@db-documents:5432/documents-app-db}

  ms-chats:
    depends_on:
      - db-chats
      - mcp-voting
      - mcp-procurement
      - mcp-attendance
    build: ./ms-chats
    ports:
      - ${MESSAGES_PORT:-8000}:8000
    volumes:
      - ./ms-chats/app:/app/app
      - ./ms-chats/alembic:/app/alembic
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - PORT=${MESSAGES_PORT:-8000}
      - NATS_SERVERS=${NATS_SERVERS:-nats://nats-server:4222}
      - DB_NAME=${DB_CHATS_NAME:-chat-app-db}
      - DB_USERNAME=${DB_CHATS_USERNAME:-postgres}
      - DB_PASSWORD=${DB_CHATS_PASSWORD:-123456}
      - DB_HOST=${DB_CHATS_HOST:-db-chats}
      - DB_PORT=${DB_CHATS_PORT:-5432}
      - MCP_ATTENDANCE_URL=${MCP_ATTENDANCE_URL:-http://mcp-attendance:8000/mcp}
      - MCP_VOTING_URL=${MCP_VOTING_URL:-http://mcp-voting:8000/mcp}
      - MCP_PROCUREMENT_URL=${MCP_PROCUREMENT_URL:-http://mcp-procurement:8000/mcp}

  db-chats:
    container_name: db-chats
    image: postgres:16.2
    restart: always
    volumes:
      - ./others/data/chat-app-db/postgres:/var/lib/postgresql/data
      - ./others/data/chat-app-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${DB_CHATS_PORT:-5532}:5432
    environment:
      - POSTGRES_DB=${DB_CHATS_NAME:-chat-app-db}
      - POSTGRES_USER=${DB_CHATS_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_CHATS_PASSWORD:-123456}

  db-documents:
    container_name: db-documents
    image: postgres:16.2
    restart: always
    volumes:
      - ./others/data/documents-app-db/postgres:/var/lib/postgresql/data
      - ./others/data/documents-app-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${DB_DOCUMENTS_PORT:-5732}:5432
    environment:
      - POSTGRES_DB=${DB_DOCUMENTS_NAME:-documents-app-db}
      - POSTGRES_USER=${DB_DOCUMENTS_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_DOCUMENTS_PASSWORD:-123456}

  mcp-attendance:
    depends_on:
      - db-qdrant
    build: ./mcp-attendance
    command: python main.py
    ports:
      - ${MCP_HOST_ATTENDANCE_PORT:-8003}:8000
    volumes:
      - ./mcp-attendance:/app
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QDRANT_HOST=${QDRANT_HOST:-db-qdrant}
      - QDRANT_PORT=${QDRANT_PORT:-6333}

  mcp-voting:
    depends_on:
      - db-qdrant
    build: ./mcp-voting
    command: python main.py
    ports:
      - ${MCP_HOST_VOTING_PORT:-8001}:8000
    volumes:
      - ./mcp-voting:/app
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QDRANT_HOST=${QDRANT_HOST:-db-qdrant}
      - QDRANT_PORT=${QDRANT_PORT:-6333}

  mcp-procurement:
    depends_on:
      - db-procurement
    build: ./mcp-procurement
    command: python main.py
    ports:
      - ${MCP_HOST_PROCUREMENT_PORT:-8002}:8000
    volumes:
      - ./mcp-procurement:/app
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - POSTGRES_HOST=${DB_PROCUREMENT_HOST:-db-procurement}
      - POSTGRES_PORT=${DB_PROCUREMENT_PORT:-5432}
      - POSTGRES_DB=${DB_PROCUREMENT_NAME:-procurement-mcp-db}
      - POSTGRES_USER=${DB_PROCUREMENT_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PROCUREMENT_PASSWORD:-123456}

  mcp-static-server:
    image: nginx:1.25.3-alpine
    ports:
      - 8080:80
    volumes:
      - ./others/data/nginx-files:/usr/share/nginx/html:ro
      - ./others/data/nginx-files/default.conf:/etc/nginx/conf.d/default.conf:ro

  db-qdrant:
    image: qdrant/qdrant:v1.14.0
    restart: always
    container_name: db-qdrant
    ports:
      - ${QDRANT_PORT:-6333}:6333 # API REST
      - ${QDRANT_PORT:-6334}:6334 # gRPC (opcional)
    volumes:
      - ./others/data/db-qdrant/storage:/qdrant/storage

  db-procurement:
    container_name: db-procurement
    image: postgres:16.2
    restart: always
    volumes:
      - ./others/data/procurement-mcp-db/postgres:/var/lib/postgresql/data
      - ./others/data/procurement-mcp-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${DB_PROCUREMENT_PORT:-5632}:5432
    environment:
      - POSTGRES_DB=${DB_PROCUREMENT_NAME:-procurement-mcp-db}
      - POSTGRES_USER=${DB_PROCUREMENT_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PROCUREMENT_PASSWORD:-123456}

  frontend:
    build: ./frontend
    ports:
      - ${FRONTEND_PORT:-4000}:80
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - ms-gateway
